@model IEnumerable<FinanceApp.Models.Expense> 
@*
    IEnumerable is a collection type that can hold multiple Expense objects.
    
    What the difference is between IEnumerable and List?
    
    IEnumerable is an interface that represents a sequence of elements that can be enumerated, while List is a concrete implementation of a collection that can be modified.
*@

@{
    ViewData["Title"] = "Expenses";
}

<h2>My Expenses</h2>

<div class="container">
    <table class="table table-bordered">
        <thead class="table-light">
            <tr>
                <th>Id</th>
                <th>Description</th>
                <th>Amount</th>
                <th>Date</th>
                <th>Category</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in Model)
            {
                <tr>
                    <td>@expense.Id</td>
                    <td>@expense.Description</td>
                    <td>@expense.Amount.ToString("C")</td>
                    <td>@expense.Date.ToShortDateString()</td>
                    <td>@expense.Category</td>
                </tr>
            }
        </tbody>
    </table>
    <div class="text-end">
        <a asp-action="Create" class="btn btn-primary">Add New Expense</a>
    </div>
</div>

<h2>Expenses Overview</h2>

<div>
    <canvas style="max-width: 450px; max-height: 450px;" id="myChart"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    const ctx = document.getElementById('myChart');

    fetch('/Expenses/GetChart')
    .then(response => response.json())
    .then(data => {
        new Chart(ctx, {
            type: 'pie',
            data: {
                labels: data.map(d => d.category),
                datasets: [{
                    data: data.map(d => d.totalAmount),
                }]
            },
        });
    })
</script>
